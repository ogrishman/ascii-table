class AsciiTable
  attr_accessor :data, :header, :lineup, :generated
  
  def build
    out = ''
    max_len = {}
    self.data.each do |row|
      j = 0
      row.each do |string|
        if max_len[j].nil? or max_len[j] < string.to_s.length
          max_len[j] = string.to_s.length
          j += 1
        end
      end
    end
    out << ' ' + '_' * (max_len.values.inject(0){ |sum, i| sum + i + 2 } + max_len.values.length - 1) + "\n"
    i = 0
    self.data.each do |row|
      str = '|'
      j = 0
      row.each do |string|
        str << format(string.to_s, max_len[j]) + '|'
        j += 1
      end
      out << str + "\n"
      i += 1
      if i == 1 and self.header
        str = '|'
        max_len.each{ |_, i| str << '=' * (i + 2) + '|' }
        out << str + "\n"
      elsif i < data.length and self.lineup
        str = '|'
        max_len.each{ |_, i| str << '-' * (i + 2) + '|' }
        out << str + "\n"
      end
    end
    
    if self.generated != false and (max_len.values.inject(0){ |sum, i| sum + i + 2 } + max_len.values.length) > 33
      out << '|' + '-' * (max_len.values.inject(0){ |sum, i| sum + i + 2 } + max_len.values.length - 1) + "|\n"
      out << '|' + ' ' * (max_len.values.inject(0){ |sum, i| sum + i + 2 } + max_len.values.length - 30) + "Generated by ascii-table gem |\n"
      out << '|' + '_' * (max_len.values.inject(0){ |sum, i| sum + i + 2 } + max_len.values.length - 1) + "|\n"
    else
      str = '|'
      max_len.each{ |_, i| str << '_' * (i + 2) + '|' }
      out << str + "\n"
    end
    
    out
  end
  
  def format string, length
    ' ' + string + ' ' * (length - string.length + 1)
  end
end
